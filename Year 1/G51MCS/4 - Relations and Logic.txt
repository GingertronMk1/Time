4 - Relations & Logic

    Relations
        A set is a collection of unordered elements
        Suppose we have
            X = {Best, Zadeh, Pieterson, Marley, Strummer}
            Y = {Cricket, Singer, fuzzylogic, Reggae, Clash, Football, NIreland}
            And we want to have some relationship between these two sets
            eg  Best was a footballer, played for Northern Ireland
        Given any sets X and Y, a binary relation R from X to Y is any subset R (subset or equal to) X x Y
        If (x,y) (contained within) R then x is related to y by R or xRy
        If a set R is a subset of the cross product of X and Y, R is their binary relation
        A relation R on a set X is called
            Reflexive if (x,x) (contained within) R for all x (contained within) X
            Symmetric if (x,y) (contained within) R whenever (y,x) (contained within) R
            Asymmetric if (x,y) in R and (y,x) in R then x=y
            Transitive if (x,y) (contained within) R and (y,z) (contained within) R then (x,z) (contained within) R

    Logic
        Why it's important
            The guts of a computer work with 0s and 1s
            The flow of a program depends on logic and branching
                If (something is true) then (do something) else (do something else)
                While (something is true) do something

        Reasoning
            Logic lets us reason about systems
            We often want to prove somthing and we do this with the help of logic
            This module deals with propositions and predicates
                We may come across such fun as temporal logic and fuzzy logic
            Logic is about deductive argument, trying to draw a conclusion

        Propositional
            A maths statement that's either true or false
                More generally a sentence that is true or false

        Predicate
            Essentially a proposition with variables
            True or false depending on the variable values
            "The pressure is low" can only be determined true or false depending on 
                The value of the variable pressure
                Your definition of low
                Fuzzy logic's pretty good at this kind of statement

        Connectives
            Name        Symbol  Meaning
            Negation    ¬       not
            Conjunction /\      and
            Disjunction \/      or
            Implication =>      if...then...
            Equivalence <=>     if AND ONLY if

            NOT p
                Let's define the proposition p: The Clash made great music
                not p can be interpreted as
                    The Clash didn't make great music
                    It is not true that The Clash made great music
                If p is true, NOT p is false
                    And vice-versa

            p AND q
                q: The late 70s was an awesome time for music
                p AND q: the Clash made great music AND the late 70s was an awesome time for music
                When is p AND q true?
                    When p is true and q is true

            p OR q
                When is p OR q true?
                    When either p or q are true

            IF p THEN q
                r: The Clash influenced modern day bands
                p => r: if The Clash made great music then the Clash influenced modern day bands
                When is p=>r true?
                    If both are true, both are false or r is true

            Equivalence
                When is p<=>r true?
                    When both are the same

        Truth Tables
            (NOT p) OR q
                p   q   Overall
                T   T   T
                T   F   F
                F   T   T
                F   F   T

            (IF p THEN q) OR p
                p   q   Overall
                T   T   T
                T   F   T
                F   T   T
                F   F   T

            (p AND q) OR (NOT p)
                p   q   Overall              /
                T   T   T                   /
                T   F   F                  /
                F   T   T              \  /
                F   F   T               \/      3/3! Woooooo

        Equivalences
            Commutativity
                Either way around gets the same answer
            Associativity
                Bracketing things gets the same answer
            Distributivity
                Expanding brackets gets the same answer
            First De Morgan Law
                NOT (p AND q) == (NOT p) OR (NOT q)
            Second De Morgan Law
                NOT (p OR q) == (NOT p) AND (NOT q)

        Tautologies & Contradictions
            A tautology is where a proposition is always true
                p OR (NOT p) is a tautology
            A contradiction is where a proposition is always false
                p AND (NOT p) is a contradiction

        Using equivalences to prove equality
            We say propositions are equal as an assertion that they're the same
            Using equivalences we can show that p AND (q AND p) = p AND q
            
        Kinds of proposition
            Atomic propositions
                Simple propositions, one element
            Compound proposition
                Propositions consisting of more than one element

        Who cares?
            Clients want to know the system will work
            The system designer needs to be able to express and understand customer requirements
            The programmer has to write the right code
            The user wants to be reassured the system is reliable

        Proof and Deduction
            We want to consider a system's properties
            The requirements for a system are:
                E => ¬C
                M => C
                (C /\ E) \/ (M /\ ¬C) => A
            We could come up with a tuth table but that would take ages
            So instead we can deduce it
                Given some premise, deduce some conclusion
                Given that the lift is in normal operation, deduce the lift won't move if the
                    capacity is exceeded
            So we can restate the problem as
                Given E => ¬C, M => C Deduce E => ¬M

        Semantic Consequence
            A conclusion is a semantic (or logical) consequence of its premises if there's no
                interpretation where the conclusion is false and all the premises are true
            Or
                When all the premises are true, the conclusion is true
            |= is the semantic turnstile (I wish I could make this up)

        Predicate Logic
            Propositions are statements that are either true or false
            Sometimes they're inadequate
            If we consider an AND statement where one being true means the other must be true, we
                can't 'see' this immediately
            An assertion that includes a variable is called a predicate
                Sort of like a boolean function in programming
                Takes one or more parameters and returns a truth value
                Let P(x) denote x < 3
                Let Q(x) denote x < 5
                To know if these statements are true or not we need to know the value of x
                P(4) is false, P(2) is true
                Q(7) is false, Q(4) is true
        Writing predicates
            To convert an english sentence into a predicate we need to find a boolean function
                or relation and the parameter(s) it takes
            x is even becomes isEven(x)
            This colour is bright becomes bright(colour), where colour is a variable
                We have to define bright in this case
            This person is rich becomes rich(person), where person is a variable
                We have to define rich in this case
        
        You can have multivariable predicates
            node x is connected to node y becomes connected(x,y)
            p is a parent of c becomes parent(p,c) or child(c,p)
            These 2-place predicates are sometimes called relations, as they relate 2 variables
        
        Number Predicates
            A two place predicate bight be the lessthan relationship
                So x is less than y becomes lessthan(x,y)
            Normally we write x < y so < is a two place predicate
                Other number predicates ≤, =, ≠, ≥, >
            Similarly the relationships in set theory are predicates
        
        The Universal Quantifier
            Consider the argument:
                All software engineers write good programs (1)
                John is a software engineer (2)
                Therefore John writes good programs (3)
            Let S(x) represent x is a software engineer
            Let G(x) represent x is a good programmer
            So we have S(John) and G(John)
            The first statement asserts that S(x) => G(x)
                This is true for all sofware engineers, not just John
                So we can translate this into
                    For all x, if x is a software engineer then x writes good programs
                This kind of thing occurs frequently, so we have some shorthand for it, ∀
            Sometimes we need to say which set x is from
            Suppose we have set P representing people, we could write
                ∀x:P,S(x) => G(x)

        The Existential Quantifier
            Some propositions take the form 'there is some value for which an assertion is true'
            eg
                Someone has won the national lottery jackpot
                There's an even prime number
                25 is a square number
            These translate to
                ∃x:P,Jackpotwinner(x)
                ∃n:N,even(n) AND prime(n)
                ∃n:N,n^2=25

        Negating Quantified Expressions
            Consider
                Every student in your class has taken a C programming module
            This is a universal quantification, specifically
                ∀x,P(x), where P(x) is a statement that x has taken a C module
            The negation of this statement is
                Not every student has taken a C module
                ∃x, NOT P(x)
            There's an equivalence here
                NOT ∀x,P(x) == ∃x, NOT P(x)

        Lewis Carroll Example
            P(x) is that x is a hummingbird
            Q(x) is that x is large
            R(x) is that x lives on honey
            S(x) is that x is richly coloured
            All hummingbirds are richly coloured
                ∀x, P(x) => S(x)
            No large birds live on honey
                NOT ∃x, Q(x) AND R(x)
            Birds that do not live on honey are dull in colour
                ∀x, NOT R(x) => NOT S(x)
            Hummingbirds are small
                ∀x, P(x) => NOT Q(x)
            Assumptions
                Large is the opposite of small (and vice-versa)
                If something is not richly coloured, it is dull in colour

        CS Russian Example
            P(x) is that x can speak Russian
            Q(x) is that x knows C++
            S is the domain (The school of Computer Science)
            There is a student in the school who speaks Russian and knows C++
                ∃x:S, P(x) AND Q(x)
            There is a student in the school who speaks Russian and doesn't know C++
                ∃x:S, P(x) AND NOT Q(x)
            Every student in the school either speaks Russian or knows C++
                ∀x:S, P(x) OR Q(x)
            No student in the school knows Russian or C++
                NOT ∀x:S, P(x) OR Q(x)

        Nested Quantifiers
            Two quantifiers are nested if one is within the scope of the other
            eg
                ∀x∃y,(x+y=0)
            Order matters here
                The second is nested within the first

        Translate to English
            ∀xC(x), ∃y(C(y) AND F(x,y)
            Where C(x) is that x has a computer
            F(x,y) is x and y are friends
            and the domain is all students in the school
            In English:
