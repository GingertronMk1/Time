3 - Functions

    Basics of Functions
        y = f(x)
            x:X -> f -> y:Y
        To show f is a function from X to Y, we write f:X->Y
        If y is the result of applying f to x, we can write f(x)=y
        eg
            addone:1...5->1...5
            Where addone is the function that adds one to the input value
            Then we have addone(1)=2
        Range and Domain
            The set of values for which the function works is its domain
            The set of values you can get out of it is its range
        addone domain and range
            dom addone = {1,2,3,4}
            ran addone = {2,3,4,5}
            Where we have f:X->Y, we define
            dom f = {x:X|there is a y within Y such that f(x)=y}
            ran f = {y:Y|there is a x within X such that f(x)=y}
        Another way of looking at it is the maplet notation
            1->2,2->3,3->4,4->5
            A function is a set of maplets
            addone == {1->2,2->3,3->4,4->5}
        Many-to-one functions are called databases

    Function Operators
        Override
        Restrict domain, <|, restricts inputs
        Restrict range, |>, restricts outputs

    Sequences
        A sequence lets us consider arrays and lists in computer science
            It's essentially a set of elements
        Each element in a sequence has an index
            eg in the sequence prime numbers, 4->7
            7 has index 4 in the sequence of prime numbers
        Operations on <1,3,5,7,9,11>
            head gives the first element, so 1
            tail gives all but the first element, so <3,5,7,9,11>
            front gives us all but the last element, so <1,3,5,7,9>
            last gives us the last element, so 11
            concatenation means chaining sequences
            takeN loses elements after index N
            dropN loses elements up to index N
        Stacks as sequences
            A stack is a data structure to which we apply operators
            Using the notation so far:
                stk,stk':seq X where stk' is the value ofthe new stack after some operation and X is any set
                x?,x!:X where x? is an input and x! an output
            Stack operations
                Push: place an item on top of the stack
                Pop: remove the top of the stack (doesn't work on an empty stack)
                Top: return the value of the top of the stack

    Phonebook Database Example
        |Name       |Phone  |
        +-----------+-------+
        |Botham     |1981   |
        |Pieterson  |2013   |
        |James      |6666   |
        |Bryant     |2424   |
        |John       |1512   |

            phonebook={Botham->1981,Pieterson->2013,James->6666,Bryant->2424,John->1512}
            Botham wants a new number, 5200
                phonebook'={Botham->5200,Pieterson->2013,James->6666,Bryant->2424,John->1512}
                phonebook'=phonebook (override) {Botham->5200}


    Numerical Functions
        Polynomials
            Functions that use powers of variables where the powers can only be natural numbers
        Logarithms
            Inverse of power, come on, you know this shit, you got an A at A-level maths!
                OK, so maybe one of the questions you fucked up was a log question, but that doesn't matter

    Types of Functions
        Injection
            The function f:X->Y is an injection if every y in Y corresponds to at most one x in X
            If there are some ys in Y not mapped to after the function is applied to every x in X, it's
            an injection
        Surjection
            The function f:X->Y is a surjection if every y in Y corresponds to at least one x in X
            If there are no ys in Y not mapped to after the function is applied to every x in X, it's a
            surjection
        Bijection
            The function f:X->Y is a bijection if every y in Y corresponds to only one x in X
        Identity
            When the function essentially does nothing
            This is a bijection
        Inclusion
            If X is a subset of Y, the function f:X-> where f(x)=x then f is called the inclusion
            function from X to Y
            This is an injection
        Inverse
            The reverse of some other function
            f:X->Y
            g:Y->X
            g(f(x)) = x
            f(g(y)) = y
            Surjective functions have no inverse by definition

    Example
        j(n)=2n is a function from N to N. Prove j is not a surjection and is an injection
        It doesn't involve an even power

    Combining functions
        g(f(x))
            f(x) = 2x+4
            g(x) = x^2
            g(f(x)) = 4x^2+4x+16 = (2x+4)^2
        If g and f are injections, gf is as well

    CS functions
        floor
            The largest integer smaller than x
        ceiling
            The smallest integer larger than x
        modulo, or remainder
            x%y is the remainder when x is divided by y
        characteristic (true or false)
            f(x) = 1 if x â‰¤ 10 and f(x)= 0 if x > 10
