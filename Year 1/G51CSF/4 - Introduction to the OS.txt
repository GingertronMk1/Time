4 - Intro to the Operating System

    Introduction
        We saw last week how a computer is just a CPU, memory and IO
        CPU just executes code from memory
        Starting, when switched on, from a defined place
        The CPU will then run that code until the machine's switched off

    Low-Level
        Programs have to speak to the hardware at the lowest level
        If the hardware changes, the code has to change too
        If you want to do something different, you need to write new code
        The code is specific to the machine you're using (not just the CPU)

    Changing Programs
        The program is fixed
        If we want to do something different we need to change the program
        Raplace the ROM chip, classically
            This is a right old ball-ache

    The Operating System
        The solution is the OS
        This allows us to load and runvarious programs
            Maybe more than one at a time
        Abstracts away from the actual hardware
            The OS provides routines that we can call to do things
        It also manages resources
        Important to remember that it's just software
        No different to the stuff we write
        Often built in layers
            Higher layers will use the abstractions provided by the lower layers
        Modern OSes are made of several parts
            Kernel - the actual OS that first starts up
            Device drivers - these talk to the hardware
            System programs - programs provided by the OS to make things easier
        Here we'll be discussing the kernel and device drivers
        Facilities
            Processes
            Memory Management
            Hardware Abstraction Layer
            File System
            Networking
            Shell
            API
            Multiuser

    Application Prgramming Interface (API)
        OS needs to provide its functionality to programs
        Does this by providing a series of routines that the program calls
        This collection of routines is known as the API

    Hardware Abstraction
        OS sits between the hardware and the programmer
        We tend to write programs for an OS rather than a specific hardware setup
        This provides a consistent programming interface regardless of the underlying hardware
        Programmer programs to the OS interface (usually using a series of functions)
        Inside the OS, the function is implemented in the appropriate way for the hardware
        Program doesn't need to know what hardware it's driving
        OS API can shield programmer from the type of device
        Making it as easy to print to a printer as to print to a screen
            Same API, different device
        Abstractions exist for specific classes of devices

    Device Drivers
        Still need to change the OS if the hardware changes
        Modern OSes get around this
        The OS defines the API
        This is implemented by another bit of software called a device driver
        Each different piece of hardware has a different device driver
        OS loads in the correct one, according to the hardware present
        Program is abstracted away from having to think about the hardware by the OS
        OS abstracted from thinking about the hardware (mostly) by device drivers
        Abstractions on abstractions
        Device driver can expose APIs of its own

    Processes
        One key feature an OS allows is for a computer to run different programs
        OS starts the program going
        Program exits when finished and returns control to the OS
            Program will call the OS a lot whilst running
        OS terminology is to call the program a process
        Initially OSes ran programs in batches - batch processes
        These days an OS can run many processes at once
            Each process is given a share of CPU time
            Known as multiprogramming
        OS is responsible for loading the program into memory, allocating space for code, data, etc
        Maintains details about each process in a process table
        Processes can start other processes
            This builds up a process tree
        Typically the OS will give the user a special shell process with which they can interact
            Starting other programs etc
            Can be a command line or GUI
