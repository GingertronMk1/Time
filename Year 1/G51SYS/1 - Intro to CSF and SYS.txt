(G51SYS) 1 - Intro to CSF & SYS

Steven R. Bagley

    How does a computer work?
        Logic gates
            NAND and NOR

    CSF/SYS
        Effectively hardware courses
        How CPUs work
        How operating systems interact with the bare metal
        How networking works
        Courses taught in tandem
            CSF: Basics, all CS 1st years do it
            SYS: Details, not taken by joint honours students

    Timetable
        No CSF or SYS lab 28th or 29th
        Mondays will be machine code-ish (Assembly ಠ_ಠ)

    Resources
        CSF will follow a course laid out by nand2tetris.org
            Comes with software that sims hardware logic circuits
            With a few additions from Nottingham (I'm not paying £9000 a year for open-source bullshit)
            Maybe get the book

        SYS will use a variety or resources
            To learn ARM assembler, Komodo
                An ARM emulator developed at the University of Manchester
                Will be installed on all Linux servers for student use

    Assessment
        CSF    
            Coursework 1: Weekly NAND2Tetris exercises, worth 40%
            Coursework 2: Network Programming, worth 35%
                Writing a simple program to read files across a network

            Exam in January, worth 25%
                Test of everything, really

        SYS
            Coursework: ARM Exercises, worth 50%
            Exam 1: Debugging ARM code, worth 25% (probably an hour and a half)
            Exam 2: worth 25% (probably an hour)

    Course Overview
        CSF
            Boolean Logic
                AND, NAND, OR, NOR, XOR, etc.
            Boolean Arithmetic
                How numbers are represented in binary, and how we can use maths operators in binary
            Sequential Logic
                Taking into account previous outputs
            Machine Language
                Learning how it works
            Computer Architecture
            Assembler (Hack)
                Assembly for n00bs
            Virtual Machines
                Programs virtualising using pretend CPUs
            High-Level Languages
                C, etc.
            Storage and Networking

        SYS
            Advanced Networking
                Going down the network hole
            Memory Management
                Making sure our programs don't leak memory like a rusty boat
            I/O
                How a computer talks to what's connected to it
            Graphics
                How to draw on a screen
            Interrupts
                Keyboards, mostly
            Parallel Processing
                Race conditions, multithreading
            Advanced OSes
            Assembler (ARM)

    Abstractions
        Lets us use things without too much thought to how it all works
