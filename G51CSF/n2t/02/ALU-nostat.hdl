// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // Put you code here:

    //zx section (if zx==0: carry on, zx==1, x = 0)
        And16(a=x,out=zerox);
        Mux16(a=x,b=zerox,sel=zx,out=zxSection);

    //nx section (if nx==0: carry on, nx==1, x = !x)
        Not16(in=zxSection,out=notzxSection);
        Mux16(a=zxSection,b=notzxSection,sel=nx,out=nxSection);

    //zy section (if zy==0: carry on, zy==1, y = 0)
        And16(a=y,out=zeroy);
        Mux16(a=y,b=zeroy,sel=zy,out=zySection);

    //ny section (if ny==0: carry on, ny==1, y = !y)
        Not16(in=zySection,out=notzySection);
        Mux16(a=zySection,b=notzySection,sel=ny,out=nySection);

    //f section (if f==0: x&y, if f==1: x+y)
        And16(a=nxSection,b=nySection,out=xAndy);
        Add16(a=nxSection,b=nySection,out=xPlusy);
        Mux16(a=xAndy,b=xPlusy,sel=f,out=fSection);

    //no section (if no==0: straight out,if no==1: negate )
        Not16(in=fSection,out=notfSection);
        Mux16(a=fSection,b=notfSection,sel=no,out=out,out[0..7]=firstEightOut,out[8..15]=secondEightOut,out[15]=negativeCheck);
}
